---
# ==========================
# Play 1: Pre-checks
# ==========================
- name: Deploy Respect Us Application to K3s Cluster
  hosts: all
  become: yes

  vars:
    # Application paths
    respect_us_path: /opt/respect-us

    # Docker images
    backend_image: "imoresdev/respect-us:backend"
    frontend_image: "imoresdev/respect-us:frontend"

    # Registry credentials (read from env, default to empty if unset)
    registry_user: "{{ lookup('env', 'DOCKER_USER') | default('') }}"
    registry_password: "{{ lookup('env', 'DOCKER_PASS') | default('') }}"
    
    # K3s / Kubernetes
    k3s_kubeconfig: /etc/rancher/k3s/k3s.yaml
    namespace: respect-us
    domain_name: respect-us.local

    # Scaling
    backend_replicas: 2
    frontend_replicas: 2

    # Resource requests/limits
    resource_requests:
      memory: "256Mi"
      cpu: "250m"
    resource_limits:
      memory: "512Mi"
      cpu: "500m"

  pre_tasks:
    - name: Validate Docker registry credentials
      fail:
        msg: "DOCKER_USER and DOCKER_PASS must be set for Docker registry login."
      when: registry_user == "" or registry_password == ""

    - name: Check for respect-us.zip on controller
      ansible.builtin.stat:
        path: "../respect-us.zip"
      register: zip_file_check
      delegate_to: localhost

    - name: Fail if respect-us.zip is missing
      fail:
        msg: "respect-us.zip not found at ../respect-us.zip"
      when: not zip_file_check.stat.exists

  # ==========================
  # Handlers
  # ==========================
  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes


# ==========================
# Play 2: K3s Master Setup
# ==========================
- name: K3s master setup
  hosts: k3s_master
  become: yes
  tasks:
    - name: Ensure K3s installed on master
      shell: curl -sfL https://get.k3s.io | sh

    - name: Fetch K3S token
      command: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token
      changed_when: false

    - name: Set token facts
      set_fact:
        k3s_token: "{{ k3s_token.stdout }}"
        master_token: "{{ k3s_token.stdout }}"


# ==========================
# Play 3: Worker Join
# ==========================
- name: Join workers to k3s cluster
  hosts: k3s_workers
  become: yes
  tasks:
    - name: Join workers
      shell: |
        K3S_URL="https://{{ hostvars['manager1'].ansible_default_ipv4.address }}:6443"
        K3S_TOKEN="{{ hostvars['manager1'].k3s_token }}"
        curl -sfL https://get.k3s.io | K3S_URL=$K3S_URL K3S_TOKEN=$K3S_TOKEN sh -
      args:
        creates: /usr/local/bin/k3s


# ==========================
# Play 4: System Setup
# ==========================
- name: Setup system packages and directories
  hosts: all
  become: yes
  tasks:
    - name: Install prerequisites
      apt:
        name:
          - unzip
          - python3-pip
        state: present
        update_cache: yes

    - name: Install Kubernetes Python client
      pip:
        name:
          - kubernetes
          - pyyaml
        state: present

    - name: Create respect-us directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop:
        - "/opt/respect-us"
        - "/opt/respect-us/logs"
        - "/opt/respect-us/configs"
        - "/opt/respect-us/backend"
        - "/opt/respect-us/frontend"


# ==========================
# Play 5: Deploy Code
# ==========================
- name: Deploy application code from ZIP
  hosts: k3s_master
  become: yes
  tasks:
    - name: Remove old backend/frontend
      file:
        path: "/opt/respect-us/{{ item }}"
        state: absent
      loop:
        - backend
        - frontend

    - name: Extract respect-us.zip
      ansible.builtin.unarchive:
        src: ../respect-us.zip
        dest: "/opt/respect-us"
        remote_src: false
        mode: '0755'

    - name: Verify backend/frontend directories exist
      stat:
        path: "/opt/respect-us/{{ item }}"
      loop:
        - backend
        - frontend
      register: dir_exists

    - name: Fail if backend/frontend missing
      fail:
        msg: "Extraction failed: Missing {{ item.item }}"
      loop: "{{ dir_exists.results }}"
      when: not item.stat.exists

    - name: Create backend Dockerfile if missing
      copy:
        dest: "/opt/respect-us/backend/Dockerfile"
        content: |
          # Stage 1: Build
          FROM python:3.11-slim AS builder
          WORKDIR /app
          RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*
          RUN pip install --no-cache-dir virtualenv
          COPY requirements.txt .
          RUN virtualenv venv && . venv/bin/activate && pip install --no-cache-dir -r requirements.txt

          # Stage 2: Runtime
          FROM python:3.11-slim
          WORKDIR /app
          RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
          COPY --from=builder /app/venv /app/venv
          COPY --chown=appuser:appuser . .
          RUN chmod +x run.sh || true
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()" || exit 1
          USER appuser
          EXPOSE 8000
          CMD ["/bin/bash", "-c", "source venv/bin/activate && exec uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2"]
        mode: '0644'
        force: no

    - name: Create frontend Dockerfile if missing
      copy:
        dest: "/opt/respect-us/frontend/Dockerfile"
        content: |
          FROM node:18

          # Set working directory
          WORKDIR /app

          # Copy dependency files first
          COPY package.json yarn.lock ./

          # Install Yarn (bundled in Node 18 already via Corepack)
          RUN corepack enable && yarn install --frozen-lockfile

          # Copy the rest of the project
          COPY . .

          # Expose Vite dev server port
          EXPOSE 5173

          # Run Vite dev server
          CMD ["yarn", "dev", "--host"]

        mode: '0644'
        force: no

    - name: Set permissions on extracted files
      file:
        path: "/opt/respect-us"
        recurse: yes
        mode: 'u=rwX,g=rX,o=rX'
        owner: root
        group: root


# ==========================
# Play 6: Install Docker
# ==========================
- name: Install and configure Docker
  hosts: k3s_master
  become: yes
  tasks:
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker's GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ ansible_architecture | replace('x86_64','amd64') }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Configure Docker daemon
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": { "max-size": "10m", "max-file": "3" },
            "storage-driver": "overlay2",
            "live-restore": true,
            "userland-proxy": false
          }
      notify:
        - restart docker

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes


# ==========================
# Play 7: Build & Push Images
# ==========================
- name: Build and push Docker images
  hosts: k3s_master
  become: yes
  vars:
    backend_image: "imoresdev/respect-us:backend"
    frontend_image: "imoresdev/respect-us:frontend"
    registry_user: "{{ lookup('env','DOCKER_USER') | default('') }}"
    registry_password: "{{ lookup('env','DOCKER_PASS') | default('') }}"
  tasks:
    - name: Docker login
      community.docker.docker_login:
        username: "{{ registry_user }}"
        password: "{{ registry_password }}"
        reauthorize: yes
      no_log: true

    - name: Build backend image
      community.docker.docker_image:
        name: "{{ backend_image }}"
        source: build
        build:
          path: "/opt/respect-us/backend"
          pull: yes
          nocache: yes
        tag: "{{ backend_image.split(':')[1] }}"

    - name: Push backend image
      community.docker.docker_image:
        name: "{{ backend_image }}"
        push: true
        source: local

    - name: Build frontend image
      command: docker build -t "{{ frontend_image }}" .
      args:
        chdir: "/opt/respect-us/frontend"
      async: 3600
      poll: 30

    - name: Push frontend image
      community.docker.docker_image:
        name: "{{ frontend_image }}"
        push: true
        source: local

# ==========================
# Play 8: Deploy Kubernetes Resources
# ==========================
- name: Deploy Kubernetes resources
  hosts: k3s_master
  become: yes
  vars:
    k3s_kubeconfig: /etc/rancher/k3s/k3s.yaml
    namespace: respect-us
    backend_image: "imoresdev/respect-us:backend"
    frontend_image: "imoresdev/respect-us:frontend"
    backend_replicas: 2
    frontend_replicas: 2
    resource_requests:
      memory: "256Mi"
      cpu: "250m"
    resource_limits:
      memory: "512Mi"
      cpu: "500m"
    registry_user: "{{ lookup('env', 'DOCKER_USER') | default('') }}"
    registry_password: "{{ lookup('env', 'DOCKER_PASS') | default('') }}"
  tasks:
    - name: Create namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present
        kubeconfig: "{{ k3s_kubeconfig }}"

    - name: Create Docker registry secret
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_kubeconfig }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: regcred
            namespace: "{{ namespace }}"
          type: kubernetes.io/dockerconfigjson
          data:
            .dockerconfigjson: "{{ {'auths': {'https://index.docker.io/v1/': {'username': registry_user, 'password': registry_password, 'auth': (registry_user ~ ':' ~ registry_password) | b64encode}}} | to_json | b64encode }}"

    - name: Deploy backend
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k3s_kubeconfig }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: respect-us-backend
            namespace: "{{ namespace }}"
          spec:
            replicas: "{{ backend_replicas }}"
            selector:
              matchLabels:
                app: respect-us-backend
            template:
              metadata:
                labels:
                  app: respect-us-backend
              spec:
                containers:
                  - name: backend
                    image: "{{ backend_image }}"
                    ports:
                      - containerPort: 8000
                    resources:
                      requests:
                        memory: "{{ resource_requests.memory }}"
                        cpu: "{{ resource_requests.cpu }}"
                      limits:
                        memory: "{{ resource_limits.memory }}"
                        cpu: "{{ resource_limits.cpu }}"

    - name: Deploy frontend
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k3s_kubeconfig }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: respect-us-frontend
            namespace: "{{ namespace }}"
          spec:
            replicas: "{{ frontend_replicas }}"
            selector:
              matchLabels:
                app: respect-us-frontend
            template:
              metadata:
                labels:
                  app: respect-us-frontend
              spec:
                nodeSelector:
                  kubernetes.io/hostname: "{{ ansible_hostname }}"  # ensures it runs on master
                containers:
                  - name: frontend
                    image: "{{ frontend_image }}"
                    ports:
                      - containerPort: 5173
                        hostPort: 80   # exposed directly on master IP
                    resources:
                      requests:
                        memory: "{{ resource_requests.memory }}"
                        cpu: "{{ resource_requests.cpu }}"
                      limits:
                        memory: "{{ resource_limits.memory }}"
                        cpu: "{{ resource_limits.cpu }}"
