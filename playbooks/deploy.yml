---
- name: Deploy Respect Us Application to K3s Cluster (Revised)
  hosts: k3s_master
  become: yes
  vars:
    respect_us_path: /opt/respect-us
    backend_image: "imoresdev/respect-us:backend"
    frontend_image: "imoresdev/respect-us:frontend"
    registry_user: "{{ lookup('env','DOCKER_USER') }}"
    registry_password: "{{ lookup('env','DOCKER_PASS') }}"
    k3s_kubeconfig: /etc/rancher/k3s/k3s.yaml
    namespace: respect-us
    domain_name: respect-us.local
    backend_replicas: 2
    frontend_replicas: 2
    resource_requests:
      memory: "256Mi"
      cpu: "250m"
    resource_limits:
      memory: "512Mi"
      cpu: "500m"

  pre_tasks:
    - name: Validate Docker registry credentials
      fail:
        msg: "DOCKER_USER and DOCKER_PASS must be set for Docker registry login."
      when: registry_user == "" or registry_password == ""
      tags: [always]

    - name: Check for respect-us.zip on controller
      ansible.builtin.stat:
        path: "../respect-us.zip"
      register: zip_file_check
      delegate_to: localhost
      tags: [always]

    - name: Fail if respect-us.zip is missing
      fail:
        msg: "respect-us.zip not found at ../respect-us.zip"
      when: not zip_file_check.stat.exists
      tags: [always]

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes

  tasks:
    - name: Setup system packages and Python libs
      tags: [setup]
      block:
        - name: Ensure unzip and Python3-pip are installed
          apt:
            name:
              - unzip
              - python3-pip
            state: present
            update_cache: yes

        - name: Install Kubernetes Python client for K8s modules
          pip:
            name:
              - kubernetes
              - pyyaml
            state: present

        - name: Create directory structure under respect-us
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
            owner: root
            group: root
          loop:
            - "{{ respect_us_path }}"
            - "{{ respect_us_path }}/logs"
            - "{{ respect_us_path }}/configs"

    - name: Deploy application code from ZIP
      tags: [deploy-code]
      block:
        - name: Extract respect-us.zip to target directory
          ansible.builtin.unarchive:
            src: ../respect-us.zip
            dest: "{{ respect_us_path }}"
            remote_src: false
            mode: '0755'

        - name: Verify that backend and frontend directories exist
          stat:
            path: "{{ respect_us_path }}/{{ item }}"
          loop:
            - backend
            - frontend
          register: dir_exists

        - name: Fail if backend or frontend directory is missing
          fail:
            msg: "Extraction failed: Missing directory {{ item.item }}."
          loop: "{{ dir_exists.results }}"
          when: not item.stat.exists

        - name: Set permissions on extracted files
          file:
            path: "{{ respect_us_path }}"
            recurse: yes
            mode: 'u=rwX,g=rX,o=rX'
            owner: root
            group: root

    - name: Install and configure Docker
      tags: [docker]
      block:
        - name: Install prerequisites for Docker
          apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
              - software-properties-common
            state: present
            update_cache: yes
            
        - name: Add Docker's official GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
            keyring: /usr/share/keyrings/docker-archive-keyring.gpg

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch={{ ansible_architecture | replace('x86_64', 'amd64') }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            update_cache: yes

        - name: Install Docker packages
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            update_cache: yes

        - name: Configure Docker daemon (logging and storage)
          copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "10m",
                  "max-file": "3"
                },
                "storage-driver": "overlay2",
                "live-restore": true,
                "userland-proxy": false
              }
          notify: restart docker

        - name: Start and enable Docker
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add ansible user to docker group (if not root)
          user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes
          when: ansible_user != 'root'

        - name: Reconnect as non-root user for Docker group
          meta: reset_connection

    - name: Create optimized Dockerfiles and .dockerignore
      tags: [dockerfiles]
      block:
        - name: Write backend multi-stage Dockerfile
          copy:
            dest: "{{ respect_us_path }}/backend/Dockerfile"
            content: |
              # Stage 1: Build
              FROM python:3.11-slim AS builder
              WORKDIR /app
              RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*
              RUN pip install --no-cache-dir virtualenv
              COPY requirements.txt .
              RUN virtualenv venv && . venv/bin/activate && pip install --no-cache-dir -r requirements.txt

              # Stage 2: Runtime
              FROM python:3.11-slim
              WORKDIR /app
              RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
              COPY --from=builder /app/venv /app/venv
              COPY --chown=appuser:appuser . .
              RUN chmod +x run.sh || true
              HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
                CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()" || exit 1
              USER appuser
              EXPOSE 8000
              CMD ["/bin/bash", "-c", "source venv/bin/activate && exec uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2"]

        - name: Write frontend multi-stage Dockerfile
          copy:
            dest: "{{ respect_us_path }}/frontend/Dockerfile"
            content: |
              # Stage 1: Dependencies
              FROM node:20-alpine AS deps
              WORKDIR /app
              RUN apk add --no-cache git
              RUN corepack enable && corepack prepare yarn@stable --activate
              COPY package.json yarn.lock* ./
              COPY .yarnrc.yml* ./
              COPY .pnp.* ./
              COPY .yarn/ ./.yarn/
              RUN --mount=type=cache,target=/root/.yarn yarn install --immutable || yarn install || npm install

              # Stage 2: Builder
              FROM node:20-alpine AS builder
              WORKDIR /app
              COPY --from=deps /app/node_modules ./node_modules
              COPY --from=deps /app/.yarn ./.yarn
              COPY --from=deps /app/.pnp.* ./
              COPY . .
              # (Optional) RUN yarn build

              # Stage 3: Runner
              FROM node:20-alpine
              WORKDIR /app
              RUN addgroup -g 1001 nodejs && adduser -S nextjs -u 1001
              COPY --from=builder --chown=nextjs:nodejs /app ./
              HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
                CMD node -e "require('http').get('http://localhost:3000', (r) => { process.exit(r.statusCode===200?0:1) })" || exit 1
              USER nextjs
              EXPOSE 3000
              CMD ["yarn", "dev", "--host", "0.0.0.0"]

        - name: Create .dockerignore for backend
          copy:
            dest: "{{ respect_us_path }}/backend/.dockerignore"
            content: |
              __pycache__
              *.pyc
              .git
              venv/
              Dockerfile
              .dockerignore

        - name: Create .dockerignore for frontend
          copy:
            dest: "{{ respect_us_path }}/frontend/.dockerignore"
            content: |
              node_modules
              .next
              .git
              Dockerfile
              .dockerignore

    - name: Build and push Docker images to Docker Hub
      tags: [docker-build]
      block:
        - name: Login to Docker registry (Docker Hub)
          community.docker.docker_login:
            username: "{{ registry_user }}"
            password: "{{ registry_password }}"
            reauthorize: yes
          no_log: true

        - name: Build backend Docker image
          community.docker.docker_image:
            name: "{{ backend_image }}"
            source: build
            build:
              path: "{{ respect_us_path }}/backend"
              pull: yes
              nocache: yes
            tag: "{{ backend_image.split(':')[1] }}"
          register: backend_build
          retries: 2
          delay: 10

        - name: Push backend Docker image
          community.docker.docker_image:
            name: "{{ backend_image }}"
            push: true
            source: local
          when: backend_build is succeeded
          register: backend_push
          retries: 3
          delay: 5

        - name: Build frontend Docker image
          community.docker.docker_image:
            name: "{{ frontend_image }}"
            source: build
            build:
              path: "{{ respect_us_path }}/frontend"
              pull: yes
              nocache: yes
            tag: "{{ frontend_image.split(':')[1] }}"
          register: frontend_build
          retries: 2
          delay: 10

        - name: Push frontend Docker image
          community.docker.docker_image:
            name: "{{ frontend_image }}"
            push: true
            source: local
          when: frontend_build is succeeded
          register: frontend_push
          retries: 3
          delay: 5

        - name: Prune unused Docker data
          shell: docker system prune -f --volumes
          changed_when: false

    - name: Deploy Kubernetes resources
      tags: [k8s-deploy]
      block:
        - name: Create namespace
          kubernetes.core.k8s:
            api_version: v1
            kind: Namespace
            name: "{{ namespace }}"
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"

        - name: Create Docker registry secret for image pulls
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: docker-registry-secret
                namespace: "{{ namespace }}"
              type: kubernetes.io/dockerconfigjson
              data:
                .dockerconfigjson: "{{ lookup('template', 'docker-config.json.j2') | b64encode }}"
          no_log: true

        - name: Create ConfigMap for environment
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: respect-us-config
                namespace: "{{ namespace }}"
              data:
                ENVIRONMENT: "production"
                LOG_LEVEL: "info"
                API_URL: "http://respect-us-backend-service:8000"

        - name: Deploy backend Deployment
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: respect-us-backend
                namespace: "{{ namespace }}"
                labels:
                  app: respect-us-backend
                  component: backend
              spec:
                replicas: "{{ backend_replicas }}"
                selector:
                  matchLabels:
                    app: respect-us-backend
                template:
                  metadata:
                    labels:
                      app: respect-us-backend
                      component: backend
                    annotations:
                      prometheus.io/scrape: "true"
                      prometheus.io/port: "8000"
                      prometheus.io/path: "/metrics"
                  spec:
                    imagePullSecrets:
                      - name: docker-registry-secret
                    containers:
                    - name: backend
                      image: "{{ backend_image }}"
                      imagePullPolicy: Always
                      ports:
                      - name: http
                        containerPort: 8000
                        protocol: TCP
                      env:
                      - name: PORT
                        value: "8000"
                      - name: POD_NAME
                        valueFrom:
                          fieldRef: { fieldPath: metadata.name }
                      - name: POD_IP
                        valueFrom:
                          fieldRef: { fieldPath: status.podIP }
                      envFrom:
                      - configMapRef:
                          name: respect-us-config
                      resources:
                        requests:
                          memory: "{{ resource_requests.memory }}"
                          cpu: "{{ resource_requests.cpu }}"
                        limits:
                          memory: "{{ resource_limits.memory }}"
                          cpu: "{{ resource_limits.cpu }}"
                      readinessProbe:
                        httpGet: { path: /health, port: http }
                        initialDelaySeconds: 10
                        periodSeconds: 5
                        timeoutSeconds: 3
                      livenessProbe:
                        httpGet: { path: /health, port: http }
                        initialDelaySeconds: 30
                        periodSeconds: 10
                        timeoutSeconds: 5
                      startupProbe:
                        httpGet: { path: /health, port: http }
                        periodSeconds: 10
                        timeoutSeconds: 3
                        successThreshold: 1
                        failureThreshold: 30
                    affinity:
                      podAntiAffinity:
                        preferredDuringSchedulingIgnoredDuringExecution:
                        - weight: 100
                          podAffinityTerm:
                            labelSelector:
                              matchExpressions:
                              - key: app
                                operator: In
                                values: ["respect-us-backend"]
                            topologyKey: kubernetes.io/hostname

        - name: Expose backend via Service
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: respect-us-backend-service
                namespace: "{{ namespace }}"
                labels:
                  app: respect-us-backend
                  component: backend
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "8000"
              spec:
                selector:
                  app: respect-us-backend
                ports:
                - name: http
                  protocol: TCP
                  port: 8000
                  targetPort: http
                type: ClusterIP
                sessionAffinity: ClientIP

        - name: Deploy frontend Deployment
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: respect-us-frontend
                namespace: "{{ namespace }}"
                labels:
                  app: respect-us-frontend
                  component: frontend
              spec:
                replicas: "{{ frontend_replicas }}"
                selector:
                  matchLabels:
                    app: respect-us-frontend
                template:
                  metadata:
                    labels:
                      app: respect-us-frontend
                      component: frontend
                  spec:
                    imagePullSecrets:
                      - name: docker-registry-secret
                    containers:
                    - name: frontend
                      image: "{{ frontend_image }}"
                      imagePullPolicy: Always
                      ports:
                      - name: http
                        containerPort: 3000
                        protocol: TCP
                      env:
                      - name: NEXT_PUBLIC_API_URL
                        value: "http://respect-us-backend-service:8000"
                      - name: NODE_ENV
                        value: "production"
                      resources:
                        requests:
                          memory: "{{ resource_requests.memory }}"
                          cpu: "{{ resource_requests.cpu }}"
                        limits:
                          memory: "{{ resource_limits.memory }}"
                          cpu: "{{ resource_limits.cpu }}"
                      readinessProbe:
                        httpGet: { path: /, port: http }
                        initialDelaySeconds: 15
                        periodSeconds: 5
                        timeoutSeconds: 3
                      livenessProbe:
                        httpGet: { path: /, port: http }
                        initialDelaySeconds: 45
                        periodSeconds: 10
                        timeoutSeconds: 5
                      startupProbe:
                        httpGet: { path: /, port: http }
                        periodSeconds: 10
                        timeoutSeconds: 3
                        successThreshold: 1
                        failureThreshold: 30
                    affinity:
                      podAntiAffinity:
                        preferredDuringSchedulingIgnoredDuringExecution:
                        - weight: 100
                          podAffinityTerm:
                            labelSelector:
                              matchExpressions:
                              - key: app
                                operator: In
                                values: ["respect-us-frontend"]
                            topologyKey: kubernetes.io/hostname

        - name: Expose frontend via Service
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: respect-us-frontend-service
                namespace: "{{ namespace }}"
                labels:
                  app: respect-us-frontend
                  component: frontend
              spec:
                selector:
                  app: respect-us-frontend
                ports:
                - name: http
                  protocol: TCP
                  port: 3000
                  targetPort: http
                type: ClusterIP

        - name: Create Ingress for frontend and backend
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: respect-us-ingress
                namespace: "{{ namespace }}"
                annotations:
                  kubernetes.io/ingress.class: "nginx"
                  nginx.ingress.kubernetes.io/enable-cors: "true"
                  nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
                  nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,Content-Type,Authorization"
                  nginx.ingress.kubernetes.io/ssl-redirect: "false"
                  nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
              spec:
                ingressClassName: nginx
                rules:
                - host: "{{ domain_name }}"
                  http:
                    paths:
                    - path: /api
                      pathType: Prefix
                      backend:
                        service:
                          name: respect-us-backend-service
                          port: { number: 8000 }
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: respect-us-frontend-service
                          port: { number: 3000 }

        - name: Horizontal Pod Autoscaler for backend
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: autoscaling/v2
              kind: HorizontalPodAutoscaler
              metadata:
                name: respect-us-backend-hpa
                namespace: "{{ namespace }}"
              spec:
                scaleTargetRef:
                  apiVersion: apps/v1
                  kind: Deployment
                  name: respect-us-backend
                minReplicas: "{{ backend_replicas }}"
                maxReplicas: 10
                metrics:
                - type: Resource
                  resource:
                    name: cpu
                    target:
                      type: Utilization
                      averageUtilization: 70
                - type: Resource
                  resource:
                    name: memory
                    target:
                      type: Utilization
                      averageUtilization: 80

        - name: Horizontal Pod Autoscaler for frontend
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: autoscaling/v2
              kind: HorizontalPodAutoscaler
              metadata:
                name: respect-us-frontend-hpa
                namespace: "{{ namespace }}"
              spec:
                scaleTargetRef:
                  apiVersion: apps/v1
                  kind: Deployment
                  name: respect-us-frontend
                minReplicas: "{{ frontend_replicas }}"
                maxReplicas: 10
                metrics:
                - type: Resource
                  resource:
                    name: cpu
                    target:
                      type: Utilization
                      averageUtilization: 70
                - type: Resource
                  resource:
                    name: memory
                    target:
                      type: Utilization
                      averageUtilization: 80

    - name: Verify deployment status
      tags: [verify]
      block:
        - name: Wait for backend rollout
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            name: respect-us-backend
            namespace: "{{ namespace }}"
            kubeconfig: "{{ k3s_kubeconfig }}"
            wait: yes
            wait_condition:
              type: Progressing
              status: "True"
              reason: NewReplicaSetAvailable
            wait_timeout: 600
          register: backend_deployment

        - name: Wait for frontend rollout
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            name: respect-us-frontend
            namespace: "{{ namespace }}"
            kubeconfig: "{{ k3s_kubeconfig }}"
            wait: yes
            wait_condition:
              type: Progressing
              status: "True"
              reason: NewReplicaSetAvailable
            wait_timeout: 600
          register: frontend_deployment

        - name: Check all pods are Running
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Pod
            namespace: "{{ namespace }}"
            kubeconfig: "{{ k3s_kubeconfig }}"
          register: pods_status

        - name: Assert pods are running
          assert:
            that:
              - item.status.phase == "Running"
            fail_msg: "Pod {{ item.metadata.name }} is not running (status={{ item.status.phase }})."
          loop: "{{ pods_status.resources }}"
          loop_control:
            label: "{{ item.metadata.name }}"

        - name: Test backend health endpoint on master
          uri:
            url: "http://{{ ansible_default_ipv4.address }}:8000/health"
            method: GET
            status_code: [200, 404]
          register: backend_health
          retries: 5
          delay: 10
          until: backend_health.status in [200, 404]
          ignore_errors: yes

        - name: Show deployment summary
          debug:
            msg: |
              =====================================
              respect-us DEPLOYMENT COMPLETED
              =====================================
              Namespace: {{ namespace }}

              URLs:
                Frontend: http://{{ domain_name }}
                Backend:  http://{{ domain_name }}/api

              Pod Status:
                Backend pods: {{ backend_deployment.resources[0].status.readyReplicas | default(0) }}/{{ backend_deployment.resources[0].status.replicas | default(0) }} Ready
                Frontend pods: {{ frontend_deployment.resources[0].status.readyReplicas | default(0) }}/{{ frontend_deployment.resources[0].status.replicas | default(0) }} Ready

              Add to /etc/hosts for local access:
                {{ ansible_default_ipv4.address }} {{ domain_name }}
              Or use direct IP:
                Frontend: http://{{ ansible_default_ipv4.address }}
                Backend:  http://{{ ansible_default_ipv4.address }}/api
