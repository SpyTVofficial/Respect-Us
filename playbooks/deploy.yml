---
- name: Deploy Respect Us Application to K3s Cluster
  hosts: k3s_master
  become: yes
  vars:
    respect_us_path: /opt/respect-us
    backend_image: "imoresdev/respect-us:backend"
    frontend_image: "imoresdev/respect-us:frontend"
    registry_user: "{{ lookup('env','DOCKER_USER') }}"
    registry_password: "{{ lookup('env','DOCKER_PASS') }}"
    k3s_kubeconfig: /etc/rancher/k3s/k3s.yaml
    namespace: respect-us
    domain_name: respect-us.local
    backend_replicas: 2
    frontend_replicas: 2
    resource_requests:
      memory: "256Mi"
      cpu: "250m"
    resource_limits:
      memory: "512Mi"
      cpu: "500m"

  pre_tasks:
    - name: Validate Docker registry credentials
      fail:
        msg: "DOCKER_USER and DOCKER_PASS must be set for Docker registry login."
      when: registry_user == "" or registry_password == ""
      tags: [always]

    - name: Check for respect-us.zip on controller
      ansible.builtin.stat:
        path: "../respect-us.zip"
      register: zip_file_check
      delegate_to: localhost
      tags: [always]

    - name: Fail if respect-us.zip is missing
      fail:
        msg: "respect-us.zip not found at ../respect-us.zip"
      when: not zip_file_check.stat.exists
      tags: [always]

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes

  tasks:
    - name: Setup system packages and Python libs
      tags: [setup]
      block:
        - name: Ensure unzip and Python3-pip are installed
          apt:
            name:
              - unzip
              - python3-pip
            state: present
            update_cache: yes

        - name: Install Kubernetes Python client for K8s modules
          pip:
            name:
              - kubernetes
              - pyyaml
            state: present

        - name: Create directory structure under respect-us
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
            owner: root
            group: root
          loop:
            - "{{ respect_us_path }}"
            - "{{ respect_us_path }}/logs"
            - "{{ respect_us_path }}/configs"

    - name: Deploy application code from ZIP
      tags: [deploy-code]
      block:
        - name: Remove old extraction if exists
          file:
            path: "{{ respect_us_path }}/backend"
            state: absent

        - name: Remove old frontend if exists
          file:
            path: "{{ respect_us_path }}/frontend"
            state: absent

        - name: Extract respect-us.zip to target directory
          ansible.builtin.unarchive:
            src: ../respect-us.zip
            dest: "{{ respect_us_path }}"
            remote_src: false
            mode: '0755'

        - name: Verify that backend and frontend directories exist
          stat:
            path: "{{ respect_us_path }}/{{ item }}"
          loop:
            - backend
            - frontend
          register: dir_exists

        - name: Fail if backend or frontend directory is missing
          fail:
            msg: "Extraction failed: Missing directory {{ item.item }}."
          loop: "{{ dir_exists.results }}"
          when: not item.stat.exists

        - name: Set permissions on extracted files
          file:
            path: "{{ respect_us_path }}"
            recurse: yes
            mode: 'u=rwX,g=rX,o=rX'
            owner: root
            group: root

    - name: Install and configure Docker
      tags: [docker]
      block:
        - name: Install prerequisites for Docker
          apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
              - software-properties-common
            state: present
            update_cache: yes

        - name: Add Docker's official GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
            keyring: /usr/share/keyrings/docker-archive-keyring.gpg

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch={{ ansible_architecture | replace('x86_64', 'amd64') }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            update_cache: yes

        - name: Install Docker packages
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            update_cache: yes

        - name: Configure Docker daemon (logging and storage)
          copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "10m",
                  "max-file": "3"
                },
                "storage-driver": "overlay2",
                "live-restore": true,
                "userland-proxy": false
              }
          notify: restart docker

        - name: Start and enable Docker
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add ansible user to docker group (if not root)
          user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes
          when: ansible_user != 'root'

        - name: Reconnect as non-root user for Docker group
          meta: reset_connection

    - name: Build and push Docker images to Docker Hub
      tags: [docker-build]
      block:
        - name: Login to Docker registry (Docker Hub)
          community.docker.docker_login:
            username: "{{ registry_user }}"
            password: "{{ registry_password }}"
            reauthorize: yes
          no_log: true

        - name: Ensure backend and frontend directories exist
          file:
            path: "{{ item }}"
            state: directory
          loop:
            - "{{ respect_us_path }}/backend"
            - "{{ respect_us_path }}/frontend"

        - name: Build backend Docker image async
          shell: docker build -t "{{ backend_image }}" .
          args:
            chdir: "{{ respect_us_path }}/backend"
          async: 3600
          poll: 30
          register: backend_build_job

        - name: Wait for backend build to finish
          async_status:
            jid: "{{ backend_build_job.ansible_job_id }}"
          register: backend_build_result
          until: backend_build_result.finished
          retries: 120
          delay: 30

        - name: Fail if backend build failed
          fail:
            msg: "Backend Docker build failed. Check logs or manually run: docker build -t {{ backend_image }} {{ respect_us_path }}/backend"
          when: backend_build_result.rc != 0

        - name: Push backend Docker image
          community.docker.docker_image:
            name: "{{ backend_image }}"
            push: true
            source: local
          register: backend_push
          retries: 3
          delay: 10

        - name: Build frontend Docker image async
          shell: docker build -t "{{ frontend_image }}" .
          args:
            chdir: "{{ respect_us_path }}/frontend"
          async: 3600
          poll: 30
          register: frontend_build_job

        - name: Wait for frontend build to finish
          async_status:
            jid: "{{ frontend_build_job.ansible_job_id }}"
          register: frontend_build_result
          until: frontend_build_result.finished
          retries: 120
          delay: 30

        - name: Fail if frontend build failed
          fail:
            msg: "Frontend Docker build failed. Check logs or manually run: docker build -t {{ frontend_image }} {{ respect_us_path }}/frontend"
          when: frontend_build_result.rc != 0

        - name: Push frontend Docker image
          community.docker.docker_image:
            name: "{{ frontend_image }}"
            push: true
            source: local
          register: frontend_push
          retries: 3
          delay: 10

        - name: Prune unused Docker data
          shell: docker system prune -f --volumes
          changed_when: false

    - name: Deploy Kubernetes resources
      tags: [k8s-deploy]
      block:
        # Create namespace, secrets, configmap, deployments, services, ingress, HPA
        # (same as your original playbook, can paste directly here)
        # ...
